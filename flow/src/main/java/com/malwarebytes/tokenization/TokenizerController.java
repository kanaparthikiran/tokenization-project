/*
 * Copyright 2019 Malwarebytes. All Rights Reserved.
 *
 * This software is the proprietary information of Malwarebytes.
 * Use is subject to license terms.
 */
package com.malwarebytes.tokenization;

import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.malwarebytes.tokenization.beans.CreditCardRequest;
import com.malwarebytes.tokenization.beans.CreditCardResponse;
import com.malwarebytes.tokenization.entities.TokenizationHash;
import com.malwarebytes.tokenization.repositories.RedisRepository;
import com.malwarebytes.tokenization.util.JsonHelper;
import com.malwarebytes.tokenization.util.UUIDGenerator;

/**
 * Tokenization Controller that is used to call backend services.
 * 
 *
 * @author Kiran Kanaparthi
 * @since July 21, 2019
 */
@RestController
@RequestMapping(value = "/api")
public class TokenizerController {

	private static final Logger logger = LoggerFactory.getLogger(TokenizerController.class);

	private final Producer producer;
	
	@Autowired
	private RedisRepository redisRepository;

	@Autowired
	public TokenizerController(Producer producer) {
		this.producer = producer;
	}
	
	@PostMapping(value = "/auth", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CreditCardResponse> sendMessageToKafkaTopic(@Valid @RequestBody final CreditCardRequest message) {
		logger.info("The Input data is {} ",message);
		this.producer.sendMessage(JsonHelper.convertJavaToJson(message));
		CreditCardResponse response = new CreditCardResponse(Boolean.TRUE,UUIDGenerator.generateUUID());
		
        TokenizationHash tokenizedHash = new TokenizationHash("12345","1535b0f4-7fd1-4d09-84f7-7d7e920ace6b");
        redisRepository.save(tokenizedHash);
        
        redisRepository.save(new TokenizationHash("11111","11111111111111"));
        redisRepository.save(new TokenizationHash("22222","22222222222222222222"));
        
        logger.info("Getting Response from Redis Repository {} ",
        			redisRepository.findById("11111").get());
        logger.info("Getting Response from Redis Repository {} ",
    			redisRepository.findById("12345").get());
        logger.info("Getting Response from Redis Repository {} ",
    			redisRepository.findById("22222").get());
        
        logger.info(" redisRepository.findAll() ");
        redisRepository.findAll().forEach(element->System.out.println(element));
        
        return new ResponseEntity<>(response, HttpStatus.OK);
	}
}
