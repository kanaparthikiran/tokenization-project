/*
 * Copyright 2019 Malwarebytes. All Rights Reserved.
 *
 * This software is the proprietary information of Malwarebytes.
 * Use is subject to license terms.
 */
package com.malwarebytes.tokenization.stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
import com.malwarebytes.tokenization.beans.CreditCardTokenBean;
import com.malwarebytes.tokenization.entities.TokenizationHash;
import com.malwarebytes.tokenization.repositories.RedisRepository;
import com.malwarebytes.tokenization.services.TokenizationService;
import com.malwarebytes.tokenization.util.JsonHelper;

/**
 * Represents Kafka Consumer/client that reads messages from a Topic.
 *
 * @author Kiran Kanaparthi
 * @since July 21, 2019
 */
@Service
public class TransactionDataConsumer {
	private final Logger logger = LoggerFactory.getLogger(TransactionDataConsumer.class);

	@Autowired
	private TransactionDataProducer transactionDataProducer;
	
	@Autowired
	private TokenizationService tokenizationService;

	@Autowired
	private RedisRepository redisRepository;

	@KafkaListener(topics = "data-input", groupId = "group_id")
	public void consume(String message) {
		logger.info(String.format("$$ -> Consumed Message -> %s", message));
		CreditCardTokenBean reqData = (CreditCardTokenBean) JsonHelper.convertJsonToJava(message,
				CreditCardTokenBean.class);
	    TokenizationHash tokenizationHash = tokenizationService.tokenizeData(reqData.getTransactionId(), reqData);
		
		// Send the Message to Kafka Output Topic
		logger.info("Sending Message to the output Topic {} ", tokenizationHash);
		transactionDataProducer.sendMessage(JsonHelper.convertJavaToJson(tokenizationHash));

		// Save The Data to Redis
		logger.info("Saving the Message to the Redis Datastore {} ", tokenizationHash);
		redisRepository.save(tokenizationHash);

	}
}