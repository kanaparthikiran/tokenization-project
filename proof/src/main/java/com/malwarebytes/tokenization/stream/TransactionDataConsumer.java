/*
 * Copyright 2019 Malwarebytes. All Rights Reserved.
 *
 * This software is the proprietary information of Malwarebytes.
 * Use is subject to license terms.
 */
package com.malwarebytes.tokenization.stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.malwarebytes.tokenization.beans.CreditCardProofBean;
import com.malwarebytes.tokenization.beans.CreditCardRequest;
import com.malwarebytes.tokenization.entities.TokenizationHash;
import com.malwarebytes.tokenization.repositories.RedisRepository;
import com.malwarebytes.tokenization.util.EncryptionUtil;
import com.malwarebytes.tokenization.util.JsonHelper;
/**
 * Represents Kafka Consumer/client.
 *
 * @author Kiran Kanaparthi
 * @since July 21, 2019
 */
@Service
public class TransactionDataConsumer {
	private final Logger logger = LoggerFactory.getLogger(TransactionDataConsumer.class);

	@Autowired
	private RedisRepository redisRepository;
	@Autowired
	private EncryptionUtil encryptionUtil;
	
	@KafkaListener(topics = "data-output", groupId = "group_id")
	public void consume(String message) {
		logger.info(String.format("$$ -> Consumed Message -> %s", message));
		TokenizationHash reqData = (TokenizationHash) JsonHelper.
				convertJsonToJava(message, TokenizationHash.class);
		TokenizationHash tokenizationHash  =
				redisRepository.findById(reqData.getTransactionId()).get();
		logger.info(" Response in the Datasink is {} ",
				JsonHelper.convertJavaToJson(tokenizationHash));
		String decryptData =
				encryptionUtil.decrypt(tokenizationHash.getToken());
//		logger.info(" Decrypted Data is {} ",
//				decryptData);
		CreditCardRequest cc = 
				(CreditCardRequest) JsonHelper.convertJsonToJava(decryptData, CreditCardRequest.class);
		CreditCardProofBean ccProof = new CreditCardProofBean(cc);
		String output = JsonHelper.convertJavaToJson(ccProof);
		logger.info(" {} ",output);
	}
}