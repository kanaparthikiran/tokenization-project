/*
 * Copyright 2019 Malwarebytes. All Rights Reserved.
 *
 * This software is the proprietary information of Malwarebytes.
 * Use is subject to license terms.
 */
package com.malwarebytes.tokenization.util;

import java.security.spec.KeySpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

/**
 * Encryption Utility to handle Encryption and Decryption
 * of data.
 *
 * @author Kiran Kanaparthi
 * @since July 21, 2019
 */
@Service
public class EncryptionUtil {
	
	@Value("${security.secretKey}")
	private String secretKey;
	
	@Value("${security.algorithm}")
	private String algorithm;
	
	@Value("${security.salt}")
	private String salt;
	
	private static String SECRET_KEY;
	private static String ALGORITHM;
	private static String SALT;

	
    @Value("${security.secretKey}")
    public void setSecretKey(String secretKey) {
    	SECRET_KEY = secretKey;
    }
    
    @Value("${security.algorithm}")
    public void setAlgorithm(String algorithm) {
    	ALGORITHM = algorithm;
    }
    
    @Value("${security.salt}")
    public void setSalt(String salt) {
        SALT = salt;
    }
    
	/**
	 * Encrypts the Data
	 * 
	 * @param strToEncrypt
	 * @param secret
	 * @return
	 */
	public  String encrypt(String strToEncrypt) {
	    try {
	        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	        IvParameterSpec ivspec = new IvParameterSpec(iv);
	         
	        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
	        KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
	        SecretKey tmp = factory.generateSecret(spec);
	        SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
	         
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
	        return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
	    } catch (Exception e) {
	        System.out.println("Error while encrypting: " + e.toString());
	    }
	    return null;
	}
	
	/**
	 * Decrypts the Data
	 * 
	 * @param strToDecrypt
	 * @param secret
	 * @return
	 */
	public String decrypt(String strToDecrypt) {
	    try {
	        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	        IvParameterSpec ivspec = new IvParameterSpec(iv);
	         
	        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
	        KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALT.getBytes(), 65536, 256);
	        SecretKey tmp = factory.generateSecret(spec);
	        SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
	         
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
	        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);
	        return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
	    }
	    catch (Exception e) {
	        System.out.println("Error while decrypting: " + e.toString());
	    }
	    return null;
	}
	
}
